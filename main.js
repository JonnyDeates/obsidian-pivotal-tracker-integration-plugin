/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => MyPlugin,
  retrieveStories: () => retrieveStories
});
module.exports = __toCommonJS(main_exports);
var import_obsidian3 = require("obsidian");

// src/mappers/storyMapper.ts
function mapStory(data) {
  return {
    id: data.id,
    name: data.name.replace("/", " "),
    points: data.estimate,
    description: data.description,
    type: data.story_type,
    url: data.url,
    state: data.current_state
  };
}
function mapStories(data) {
  return data.map((d) => mapStory(d));
}

// src/apiClient.ts
var import_obsidian = require("obsidian");
var TRACKER_URL = "https://www.pivotaltracker.com/services/v5";
function generateConfig(trackerToken, projectId, queryParam) {
  return {
    method: "GET",
    url: `${TRACKER_URL}/projects/${projectId}/stories?${queryParam}`,
    headers: {
      "X-TrackerToken": trackerToken
    },
    contentType: "application/json"
  };
}
async function getStories(trackerId, trackerToken, included) {
  try {
    const projectId = parseInt(trackerId);
    const response = [];
    if (included.includeStories) {
      let unstartedStories = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_state=unstarted")));
      let startedStories = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_state=started")));
      response.push(...unstartedStories, ...startedStories);
    }
    if (included.includeChores) {
      let unstartedChores = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_story_type=chore&with_state=unstarted")));
      let startedChores = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_story_type=chore&with_state=started")));
      response.push(...unstartedChores, ...startedChores);
    }
    if (included.includeBugs) {
      let unstartedBugs = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_story_type=bug&with_state=unstarted")));
      let startedBugs = JSON.parse(await (0, import_obsidian.request)(generateConfig(trackerToken, projectId, "with_story_type=bug&with_state=started")));
      response.push(...unstartedBugs, ...startedBugs);
    }
    let stories = mapStories(response);
    return stories.filter((story) => {
      const onlyNonAccepted = story.state !== "accepted";
      if (included.pointed) {
        return onlyNonAccepted && typeof story.points === "number";
      }
      return onlyNonAccepted;
    });
  } catch (e) {
    return Promise.reject(e.message);
  }
}

// src/writeOutputToFile.ts
async function writeOutputToFile(folderPath, markdown, fileName) {
  const modifiedFileName = fileName.replace("/", " ");
  const readmePath = `${folderPath}/${modifiedFileName}.md`;
  return this.app.vault.create(readmePath, markdown);
}

// src/generateMarkdown.ts
var import_obsidian2 = require("obsidian");
function storyToMarkdown(story) {
  let currentStory = appendLine(`### ${story.name} [#${story.id}](${story.url})`, newLine("## Pivotal Tracker"));
  if (story.type === "feature" && story.points) {
    currentStory = appendLine(newLine("#### Points: " + story.points), currentStory);
  }
  if (story.description) {
    currentStory = appendLine("### Description", currentStory);
    currentStory = appendLine(story.description, currentStory);
  }
  currentStory = appendLine(generateTags(story.type), currentStory);
  return currentStory;
}
function newLine(content) {
  return `${content}\r
`;
}
function appendLine(content, destination) {
  return newLine(`${destination + content}`);
}
function generateTags(type) {
  return newLine("") + newLine("---") + newLine("tags") + newLine("  - pivotal-tracker") + newLine("  - " + type) + newLine("---");
}
function generateMarkdown(folderPath, stories) {
  stories.forEach(async (feature) => {
    await writeOutputToFile(folderPath, appendLine(storyToMarkdown(feature), ""), feature.name).then(() => {
      new import_obsidian2.Notice(`${feature.name} Created`);
    }).catch(() => {
    });
  });
  new import_obsidian2.Notice("Stories Created");
}

// main.ts
var DEFAULT_SETTINGS = {
  folderPath: "./stories",
  includeBugs: true,
  includeChores: true,
  includeStories: true,
  trackerUserId: "default",
  trackerAppId: "default",
  onlyPointedStories: false
};
var retrieveStories = async (settings) => {
  const { trackerUserId, trackerAppId, folderPath, onlyPointedStories, includeStories, includeChores, includeBugs } = settings;
  const inclusion = { includeStories, includeChores, includeBugs, pointed: onlyPointedStories };
  const stories = await getStories(trackerAppId, trackerUserId, inclusion);
  generateMarkdown(folderPath, stories);
};
var MyPlugin = class extends import_obsidian3.Plugin {
  async onload() {
    await this.loadSettings();
    const ribbonIconEl = this.addRibbonIcon("book-open", "Pull Tracker Stories", (evt) => {
      retrieveStories(this.settings).then(() => {
        new import_obsidian3.Notice("Retrieving Stories");
      }).catch((e) => {
        new import_obsidian3.Notice(e + this.settings.trackerAppId + this.settings.trackerUserId);
      });
    });
    ribbonIconEl.addClass("my-plugin-ribbon-class");
    const statusBarItemEl = this.addStatusBarItem();
    statusBarItemEl.setText("Status Bar Text");
    this.addCommand({
      id: "open-sample-modal-simple",
      name: "Open sample modal (simple)",
      callback: () => {
        new SampleModal(this.app).open();
      }
    });
    this.addCommand({
      id: "sample-editor-command",
      name: "Sample editor command",
      editorCallback: (editor, view) => {
        console.log(editor.getSelection());
        editor.replaceSelection("Sample Editor Command");
      }
    });
    this.addCommand({
      id: "open-sample-modal-complex",
      name: "Open sample modal (complex)",
      checkCallback: (checking) => {
        const markdownView = this.app.workspace.getActiveViewOfType(import_obsidian3.MarkdownView);
        if (markdownView) {
          if (!checking) {
            new SampleModal(this.app).open();
          }
          return true;
        }
      }
    });
    this.addSettingTab(new TrackerIntegrationSettingTab(this.app, this));
    this.registerDomEvent(document, "click", (evt) => {
      console.log("click", evt);
    });
    this.registerInterval(window.setInterval(() => console.log("setInterval"), 5 * 60 * 1e3));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
};
var SampleModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setText("Woah!");
  }
  onClose() {
    const { contentEl } = this;
    contentEl.empty();
  }
};
var TrackerIntegrationSettingTab = class extends import_obsidian3.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Settings for Tracker Integration" });
    new import_obsidian3.Setting(containerEl).setName("Tracker User Token").setDesc('To retrieve this, it can be found in your profile settings under "API KEY"').addText((text) => text.setPlaceholder("Enter your API Key").setValue(this.plugin.settings.trackerUserId).onChange(async (value) => {
      this.plugin.settings.trackerUserId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Tracker App ID").setDesc("This can be found in the project url bar https://www.pivotaltracker.com/n/projects/<your_project_id>").addText((text) => text.setPlaceholder("Enter your Apps Id").setValue(this.plugin.settings.trackerAppId).onChange(async (value) => {
      this.plugin.settings.trackerAppId = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Folder Path").setDesc("This is the folder path to dump the stories it, currently they do NOT get created automatically.").addText((text) => text.setPlaceholder("./Path/Name").setValue(this.plugin.settings.folderPath).onChange(async (value) => {
      this.plugin.settings.folderPath = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Only Pointed Stories").setDesc("Should only grab pointed stories if it is on.").addToggle((ev) => ev.setValue(this.plugin.settings.onlyPointedStories).onChange(async (value) => {
      this.plugin.settings.onlyPointedStories = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Include Stories").setDesc("Should include stories if it is on.").addToggle((ev) => ev.setValue(this.plugin.settings.includeStories).onChange(async (value) => {
      this.plugin.settings.includeStories = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Include Chores").setDesc("Should include chores if it is on.").addToggle((ev) => ev.setValue(this.plugin.settings.includeChores).onChange(async (value) => {
      this.plugin.settings.includeChores = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian3.Setting(containerEl).setName("Include Bugs").setDesc("Should include bugs if it is on.").addToggle((ev) => ev.setValue(this.plugin.settings.includeBugs).onChange(async (value) => {
      this.plugin.settings.includeBugs = value;
      await this.plugin.saveSettings();
    }));
  }
};
